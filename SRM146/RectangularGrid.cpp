#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <limits>
#include <tuple>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class RectangularGrid {
public:
	long long countRectangles(int width, int height) {
		long long res = 0;

		for (int i = 0; i < width; i++)
		{
			for (int k = 0; k < height; k++)
			{
					if ( k == i)
						continue;
					res += (width - i)*(height - k);
			}
		}


		for (int i = 0; i < width; i++)

		return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	RectangularGrid *obj;
	long long answer;
	obj = new RectangularGrid();
	clock_t startTime = clock();
	answer = obj->countRectangles(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
		if (hasAnswer) {
			cout << "Desired answer:" << endl;
			cout << "\t" << p2 << endl;
		}
		cout << "Your answer:" << endl;
		cout << "\t" << answer << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	long long p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 3;
	p1 = 3;
	p2 = 22ll;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 5;
	p1 = 2;
	p2 = 31ll;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 10;
	p1 = 10;
	p2 = 2640ll;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 1;
	p1 = 1;
	p2 = 0ll;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 592;
	p1 = 964;
	p2 = 81508708664ll;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Given the width and height of a rectangular grid, return the total number of rectangles (NOT counting squares) that can be found on this grid.
// For example, width = 3, height = 3 (see diagram below):
// 
//  __ __ __
// |__|__|__|
// |__|__|__|
// |__|__|__|
// 
// In this grid, there are 4 2x3 rectangles, 6 1x3 rectangles and 12 1x2 rectangles. Thus there is a total of 4 + 6 + 12 = 22 rectangles. Note we don't count 1x1, 2x2 and 3x3 rectangles because they are squares.
// 
// 
// DEFINITION
// Class:RectangularGrid
// Method:countRectangles
// Parameters:int, int
// Returns:long long
// Method signature:long long countRectangles(int width, int height)
// 
// 
// NOTES
// -rectangles with equals sides (squares) should not be counted.
// 
// 
// CONSTRAINTS
// -width and height will be between 1 and 1000 inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 3
// 3
// 
// Returns: 22
// 
// See above
// 
// 1)
// 5
// 2
// 
// Returns: 31
// 
// 
//  __ __ __ __ __
// |__|__|__|__|__|
// |__|__|__|__|__|
// 
// In this grid, there is one 2x5 rectangle, 2 2x4 rectangles, 2 1x5 rectangles, 3 2x3 rectangles, 4 1x4 rectangles, 6 1x3 rectangles and 13 1x2 rectangles. Thus there is a total of 1 + 2 + 2 + 3 + 4 + 6 + 13 = 31 rectangles.
// 
// 2)
// 10
// 10
// 
// Returns: 2640
// 
// 3)
// 1
// 1
// 
// Returns: 0
// 
// 4)
// 592
// 964
// 
// Returns: 81508708664
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
