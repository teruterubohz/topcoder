import math,string,itertools,fractions,heapq,collections,re,array,bisect,random

class PeopleCircle:
    def order(self, numMales, numFemales, K):
        
        return

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, p2, hasAnswer, p3):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str(p0) + str(",") + str(p1) + str(",") + str(p2))
	print(str("]"))
	obj = PeopleCircle()
	startTime = time.clock()
	answer = obj.order(p0, p1, p2)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		res = answer == p3
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
		if (hasAnswer):
			print(str("Desired answer:"))
			print(str("\t") + str("\"") + str(p3) + str("\""))
		
		print(str("Your answer:"))
		print(str("\t") + str("\"") + str(answer) + str("\""))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = 5
p1 = 3
p2 = 2
p3 = "MFMFMFMM"
all_right = (disabled or KawigiEdit_RunTest(0, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = 7
p1 = 3
p2 = 1
p3 = "FFFMMMMMMM"
all_right = (disabled or KawigiEdit_RunTest(1, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = 25
p1 = 25
p2 = 1000
p3 = "MMMMMFFFFFFMFMFMMMFFMFFFFFFFFFMMMMMMMFFMFMMMFMFMMF"
all_right = (disabled or KawigiEdit_RunTest(2, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = 5
p1 = 5
p2 = 3
p3 = "MFFMMFFMFM"
all_right = (disabled or KawigiEdit_RunTest(3, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = 1
p1 = 0
p2 = 245
p3 = "M"
all_right = (disabled or KawigiEdit_RunTest(4, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# 
# There are numMales males and numFemales females arranged in a circle. Starting from a given point, you count clockwise and remove the K'th person from the circle (where K=1 is the person at the current point, K=2 is the next person in the clockwise direction, etc...).  After removing that person, the next person in the clockwise direction becomes the 
# new starting point.  After repeating this procedure numFemales times, 
# there are no females left in the circle.		
# 
# Given numMales, numFemales and K, your task is to return what the initial arrangement of people in the circle must have been, starting from the starting point and in clockwise order.
# 
# For example, if there are 5 males and 3 females and you remove every second person, your return String will be "MFMFMFMM".
# 
# 
# DEFINITION
# Class:PeopleCircle
# Method:order
# Parameters:integer, integer, integer
# Returns:string
# Method signature:def order(self, numMales, numFemales, K):
# 
# 
# CONSTRAINTS
# -numMales is between 0 and 25 inclusive
# -numFemales is between 0 and 25 inclusive
# -K is between 1 and 1000 inclusive
# 
# 
# EXAMPLES
# 
# 0)
# 5
# 3
# 2
# 
# Returns: "MFMFMFMM"
# 
# Return "MFMFMFMM". On the first round you remove the second person - "M_MFMFMM". Your new circle looks like "MFMFMMM" from your new starting point. Then you remove the second person again etc.
# 
# 1)
# 7
# 3
# 1
# 
# Returns: "FFFMMMMMMM"
# 
# Starting from the starting point you remove the first person, then you continue and remove the next first person etc. Clearly, all the females are located at the beginning. Hence return "FFFMMMMMMM"
# 
# 2)
# 25
# 25
# 1000
# 
# Returns: "MMMMMFFFFFFMFMFMMMFFMFFFFFFFFFMMMMMMMFFMFMMMFMFMMF"
# 
# 3)
# 5
# 5
# 3
# 
# Returns: "MFFMMFFMFM"
# 
# Here we mark the removed people with '_', and the starting position with lower-case:
# 
# Number of      | People Remaining
# Rounds         | (in initial order)
# ---------------+-----------------
#  0             | mFFMMFFMFM
#  1             | MF_mMFFMFM
#  2             | MF_MM_fMFM
#  3             | MF_MM_FM_m
#  4             | M__mM_FM_M
#  5             | M__MM__m_M
# 
# 
# 
# 4)
# 1
# 0
# 245
# 
# Returns: "M"
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!
