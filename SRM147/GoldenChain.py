import math,string,itertools,fractions,heapq,collections,re,array,bisect,random

class GoldenChain:
    def minCuts(self, sections):
        
        return

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, hasAnswer, p1):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p0[i]))
	
	sys.stdout.write(str("}"))
	print(str("]"))
	obj = GoldenChain()
	startTime = time.clock()
	answer = obj.minCuts(p0)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		res = answer == p1
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
		if (hasAnswer):
			print(str("Desired answer:"))
			print(str("\t") + str(p1))
		
		print(str("Your answer:"))
		print(str("\t") + str(answer))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = (3,3,3,3)
p1 = 3
all_right = (disabled or KawigiEdit_RunTest(0, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = (2000000000,)
p1 = 1
all_right = (disabled or KawigiEdit_RunTest(1, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50)
p1 = 42
all_right = (disabled or KawigiEdit_RunTest(2, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = (20000000,20000000,2000000000)
p1 = 3
all_right = (disabled or KawigiEdit_RunTest(3, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = (10,10,10,10,10,1,1,1,1,1)
p1 = 5
all_right = (disabled or KawigiEdit_RunTest(4, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 5 -----
disabled = False
p0 = (1,10)
p1 = 1
all_right = (disabled or KawigiEdit_RunTest(5, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# Background
# 
# I remember a chain problem from my childhood. Suppose you have four sections of a golden chain. Each consists of three links joined together in a line. You would like to connect all four sections into a necklace. The obvious solution is to cut the last link of each section and use it to connect the first section to the second one, then the second to the third, then the third to the fourth, then the fourth to the first one. If you want to minimize the number of cuts, you can do better. You can cut one of the three link sections into its individual links. Using the three loose links you can join the three remaining sections together.
# 
# Your task is, given the lengths of the sections, to return the minimum number of cuts to make one big circular necklace out of all of them.
# 
# 
# DEFINITION
# Class:GoldenChain
# Method:minCuts
# Parameters:tuple (integer)
# Returns:integer
# Method signature:def minCuts(self, sections):
# 
# 
# CONSTRAINTS
# -sections has between 1 and 50 elements inclusive
# -each element of sections is between 1 and 2,147,483,647 inclusive
# -the sum of all elements of sections is between 3 and 2,147,483,647 inclusive
# 
# 
# EXAMPLES
# 
# 0)
# {3,3,3,3}
# 
# Returns: 3
# 
# 1)
# {2000000000}
# 
# Returns: 1
# 
# 2)
# {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
# 21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,
# 38,39,40,41,42,43,44,45,46,47,48,49,50}
# 
# Returns: 42
# 
# 3)
# {20000000,20000000,2000000000}
# 
# Returns: 3
# 
# 4)
# {10,10,10,10,10,1,1,1,1,1}
# 
# Returns: 5
# 
# 5)
# {1,10}
# 
# Returns: 1
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!
