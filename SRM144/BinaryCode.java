import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class BinaryCode
{
	public String[] decode(String message)
	{
		String[] res = new String[2];
		int[] decodeInt = new int[message.length()+1];
		int[] encodeInt = new int[message.length()+1];
		String str = "";
		
		decodeInt[0]=0;
		for( int i = 0 ; i < message.length() ; i++ )
		{
			decodeInt[i+1] = message.charAt(i) - '0';
		}
		
		encodeInt[0] = 0;
		encodeInt[1] = 0;
		for(int i = 1 ; i < message.length() ; i++ )
		{
			encodeInt[ i + 1 ] = decodeInt[i] - encodeInt[i-1] - encodeInt[i];
			if( encodeInt[i+1] != 0 && encodeInt[i+1] != 1 )
			{
				res[0] = "NONE";
				break;
			}
		}
		
		if( res[0] != "NONE" )
		{
			if( decodeInt[message.length()] != encodeInt[message.length()-1] + encodeInt[message.length()])
				res[0] = "NONE";
			else
			{
				for( int i = 1 ; i < message.length()+1 ; i++ )
					str += String.valueOf(encodeInt[i]);
				res[0] = str;
				str = "";
			}
		}
		
		encodeInt = new int[message.length()+1];
		encodeInt[0] = 0;
		encodeInt[1] = 1;
		for(int i = 1 ; i < message.length() ; i++ )
		{
			encodeInt[ i + 1 ] = decodeInt[i] - encodeInt[i-1] - encodeInt[i];
			if( encodeInt[i+1] != 0 && encodeInt[i+1] != 1 )
			{
				res[1] = "NONE";
				break;
			}
		}
		
		if( res[1] != "NONE" )
		{
			if( decodeInt[message.length()] != encodeInt[message.length()-1] + encodeInt[message.length()])
				res[1] = "NONE";
			else
			{
				for( int i = 1 ; i < message.length()+1 ; i++ )
					str += String.valueOf(encodeInt[i]);
				res[1] = str;
				str = null;
			}
		}

		return res;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, String[] p1) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
		System.out.println("]");
		BinaryCode obj;
		String[] answer;
		obj = new BinaryCode();
		long startTime = System.currentTimeMillis();
		answer = obj.decode(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			if (answer.length != p1.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (!answer[i].equals(p1[i])) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.print("\t" + "{");
				for (int i = 0; p1.length > i; ++i) {
					if (i > 0) {
						System.out.print(",");
					}
					System.out.print("\"" + p1[i] + "\"");
				}
				System.out.println("}");
			}
			System.out.println("Your answer:");
			System.out.print("\t" + "{");
			for (int i = 0; answer.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print("\"" + answer[i] + "\"");
			}
			System.out.println("}");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		String p0;
		String[] p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = "123210122";
		p1 = new String[]{"011100011","NONE"};
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = "11";
		p1 = new String[]{"01","10"};
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = "22111";
		p1 = new String[]{"NONE","11001"};
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = "123210120";
		p1 = new String[]{"NONE","NONE"};
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = "3";
		p1 = new String[]{"NONE","NONE"};
		all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 5 -----
		disabled = false;
		p0 = "12221112222221112221111111112221111";
		p1 = new String[]{"01101001101101001101001001001101001","10110010110110010110010010010110010"};
		all_right = (disabled || KawigiEdit_RunTest(5, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Let's say you have a binary string such as the following:
	// 
	// 011100011
	// 
	// One way to encrypt this string is to add to each digit the sum of its adjacent digits.  For example, the above string would become:
	// 
	// 123210122
	// 
	// In particular, if P is the original string, and Q is the encrypted string, then Q[i] = P[i-1] + P[i] + P[i+1] for all digit positions i.  Characters off the left and right edges of the string are treated as zeroes.
	// 
	// An encrypted string given to you in this format can be decoded as follows (using 123210122 as an example):
	// 
	// Assume P[0] = 0.
	// Because Q[0] = P[0] + P[1] = 0 + P[1] = 1, we know that P[1] = 1.
	// Because Q[1] = P[0] + P[1] + P[2] = 0 + 1 + P[2] = 2, we know that P[2] = 1.
	// Because Q[2] = P[1] + P[2] + P[3] = 1 + 1 + P[3] = 3, we know that P[3] = 1.
	// Repeating these steps gives us P[4] = 0, P[5] = 0, P[6] = 0, P[7] = 1, and P[8] = 1.
	// We check our work by noting that Q[8] = P[7] + P[8] = 1 + 1 = 2.  Since this equation works out, we are finished, and we have recovered one possible original string.
	// 
	// Now we repeat the process, assuming the opposite about P[0]:
	// 
	// Assume P[0] = 1.
	// Because Q[0] = P[0] + P[1] = 1 + P[1] = 1, we know that P[1] = 0.
	// Because Q[1] = P[0] + P[1] + P[2] = 1 + 0 + P[2] = 2, we know that P[2] = 1.
	// Now note that Q[2] = P[1] + P[2] + P[3] = 0 + 1 + P[3] = 3, which leads us to the conclusion that P[3] = 2.  However, this violates the fact that each character in the original string must be '0' or '1'.  Therefore, there exists no such original string P where the first digit is '1'.
	// 
	// Note that this algorithm produces at most two decodings for any given encrypted string.  There can never be more than one possible way to decode a string once the first binary digit is set.
	// 
	// Given a String message, containing the encrypted string, return a String[] with exactly two elements.  The first element should contain the decrypted string assuming the first character is '0'; the second element should assume the first character is '1'.  If one of the tests fails, return the string "NONE" in its place.  For the above example, you should return {"011100011", "NONE"}.
	// 
	// DEFINITION
	// Class:BinaryCode
	// Method:decode
	// Parameters:String
	// Returns:String[]
	// Method signature:String[] decode(String message)
	// 
	// 
	// CONSTRAINTS
	// -message will contain between 1 and 50 characters, inclusive.
	// -Each character in message will be either '0', '1', '2', or '3'.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// "123210122"
	// 
	// Returns: { "011100011",  "NONE" }
	// 
	// The example from above.
	// 
	// 1)
	// "11"
	// 
	// Returns: { "01",  "10" }
	// 
	// We know that one of the digits must be '1', and the other must be '0'.  We return both cases.
	// 
	// 2)
	// "22111"
	// 
	// Returns: { "NONE",  "11001" }
	// 
	// Since the first digit of the encrypted string is '2', the first two digits of the original string must be '1'.  Our test fails when we try to assume that P[0] = 0.
	// 
	// 3)
	// "123210120"
	// 
	// Returns: { "NONE",  "NONE" }
	// 
	// This is the same as the first example, but the rightmost digit has been changed to something inconsistent with the rest of the original string.  No solutions are possible.
	// 
	// 4)
	// "3"
	// 
	// Returns: { "NONE",  "NONE" }
	// 
	// 5)
	// "12221112222221112221111111112221111"
	// 
	// Returns: { "01101001101101001101001001001101001",  "10110010110110010110010010010110010" }
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
