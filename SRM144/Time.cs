using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.Text.RegularExpressions;


public class Time
{
	public string whatTime(int seconds)
	{
		
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	#region Testing code generated by KawigiEdit
	[STAThread]
	private static Boolean KawigiEdit_RunTest(int testNum, int p0, Boolean hasAnswer, string p1) {
		Console.Write("Test " + testNum + ": [" + p0);
		Console.WriteLine("]");
		Time obj;
		string answer;
		obj = new Time();
		DateTime startTime = DateTime.Now;
		answer = obj.whatTime(p0);
		DateTime endTime = DateTime.Now;
		Boolean res;
		res = true;
		Console.WriteLine("Time: " + (endTime - startTime).TotalSeconds + " seconds");
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			Console.WriteLine("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				Console.WriteLine("Desired answer:");
				Console.WriteLine("\t" + "\"" + p1 + "\"");
			}
			Console.WriteLine("Your answer:");
			Console.WriteLine("\t" + "\"" + answer + "\"");
		} else if ((endTime - startTime).TotalSeconds >= 2) {
			Console.WriteLine("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			Console.WriteLine("Match :-)");
		} else {
			Console.WriteLine("OK, but is it right?");
		}
		Console.WriteLine("");
		return res;
	}
	public static void Main(string[] args) {
		Boolean all_right;
		Boolean disabled;
		Boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int p0;
		string p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 0;
		p1 = "0:0:0";
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 3661;
		p1 = "1:1:1";
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 5436;
		p1 = "1:30:36";
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = 86399;
		p1 = "23:59:59";
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				Console.WriteLine("You're a stud (but some test cases were disabled)!");
			} else {
				Console.WriteLine("You're a stud (at least on given cases)!");
			}
		} else {
			Console.WriteLine("Some of the test cases had errors.");
		}
	}
	#endregion
	// PROBLEM STATEMENT
	// Computers tend to store dates and times as single numbers which represent the number of seconds or milliseconds since a particular date.  Your task in this problem is to write a method whatTime, which takes an int, seconds, representing the number of seconds since midnight on some day, and returns a string formatted as "<H>:<M>:<S>".  Here, <H> represents the number of complete hours since midnight, <M> represents the number of complete minutes since the last complete hour ended, and <S> represents the number of seconds since the last complete minute ended.  Each of <H>, <M>, and <S> should be an integer, with no extra leading 0's.  Thus, if seconds is 0, you should return "0:0:0", while if seconds is 3661, you should return "1:1:1".
	// 
	// DEFINITION
	// Class:Time
	// Method:whatTime
	// Parameters:int
	// Returns:string
	// Method signature:string whatTime(int seconds)
	// 
	// 
	// CONSTRAINTS
	// -seconds will be between 0 and 24*60*60 - 1 = 86399, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 0
	// 
	// Returns: "0:0:0"
	// 
	// 1)
	// 3661
	// 
	// Returns: "1:1:1"
	// 
	// 2)
	// 5436
	// 
	// Returns: "1:30:36"
	// 
	// 3)
	// 86399
	// 
	// Returns: "23:59:59"
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
